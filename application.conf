deepdive {

  db.default {
    driver   : "org.postgresql.Driver"
    url      : "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user     : ${PGUSER}
    password : ${PGPASSWORD}
    dbname   : ${DBNAME}
    host     : ${PGHOST}
    port     : ${PGPORT}
  }

  ###
  ### VARIABLES
  ###

  schema.variables {

    # Want to predict whether or not a given date is enjoyable
    output.is_enjoyable: Boolean

  }

  ###
  ### EXTRACTORS
  ###

  extraction.extractors {

    cleanup {
      sql: """
        DELETE FROM date_feature;
        DELETE FROM output;
      """
      style: "sql_extractor"
    }

    # Creates a table of 1 row.
    compute_prosodic_statistics {
      sql: """
        DROP TABLE IF EXISTS prosodic_statistics;

        CREATE TABLE prosodic_statistics AS
          SELECT min(pros1.turn_duration) AS min_turn_duration,
                 max(pros1.turn_duration) AS max_turn_duration,
                 min(pros1.turn_duration_sd) AS min_turn_duration_sd,
                 max(pros1.turn_duration_sd) AS max_turn_duration_sd,
                 min(pros1.f0_min) AS min_f0_min,
                 max(pros1.f0_min) AS max_f0_min,
                 min(pros1.f0_min_sd) AS min_f0_min_sd,
                 max(pros1.f0_min_sd) AS max_f0_min_sd,
                 min(pros1.f0_max) AS min_f0_max,
                 max(pros1.f0_max) AS max_f0_max,
                 min(pros1.f0_max_sd) AS min_f0_max_sd,
                 max(pros1.f0_max_sd) AS max_f0_max_sd,
                 min(pros1.f0_mean) AS min_f0_mean,
                 max(pros1.f0_mean) AS max_f0_mean,
                 min(pros1.f0_mean_sd) AS min_f0_mean_sd,
                 max(pros1.f0_mean_sd) AS max_f0_mean_sd,
                 min(pros1.f0_sd) AS min_f0_sd,
                 max(pros1.f0_sd) AS max_f0_sd,
                 min(pros1.f0_sd_sd) AS min_f0_sd_sd,
                 max(pros1.f0_sd_sd) AS max_f0_sd_sd,
                 min(pros1.pitch_range) AS min_pitch_range,
                 max(pros1.pitch_range) AS max_pitch_range,
                 min(pros1.pitch_range_sd) AS min_pitch_range_sd,
                 max(pros1.pitch_range_sd) AS max_pitch_range_sd,
                 min(pros1.rms_min) AS min_rms_min,
                 max(pros1.rms_min) AS max_rms_min,
                 min(pros1.rms_min_sd) AS min_rms_min_sd,
                 max(pros1.rms_min_sd) AS max_rms_min_sd,
                 min(pros1.rms_max) AS min_rms_max,
                 max(pros1.rms_max) AS max_rms_max,
                 min(pros1.rms_max_sd) AS min_rms_max_sd,
                 max(pros1.rms_max_sd) AS max_rms_max_sd,
                 min(pros1.rms_mean) AS min_rms_mean,
                 max(pros1.rms_mean) AS max_rms_mean,
                 min(pros1.rms_mean_sd) AS min_rms_mean_sd,
                 max(pros1.rms_mean_sd) AS max_rms_mean_sd
          FROM prosodic_features pros1
      """
      style: "sql_extractor"
      dependencies: ["cleanup"]
    }


    # Creates a table of 1 row.
    compute_meta_statistics {
      sql: """
        DROP TABLE IF EXISTS meta_statistics;

        CREATE TABLE meta_statistics AS
          SELECT
               min(p1.female) AS min_female,
               max(p1.female) AS max_female,
               min(p1.race) AS min_race,
               max(p1.race) AS max_race,
               min(p1.evntgoal) AS min_evntgoal,
               max(p1.evntgoal) AS max_evntgoal,
               min(p1.frqdates) AS min_frqdates,
               max(p1.frqdates) AS max_frqdates,
               min(p1.frqsocl) AS min_frqsocl,
               max(p1.frqsocl) AS max_frqsocl,
               min(p1.sdbefore) AS min_sdbefore,
               max(p1.sdbefore) AS max_sdbefore,
               min(p1.height) AS min_height,
               max(p1.height) AS max_height,
               min(p1.weight) AS min_weight,
               max(p1.weight) AS max_weight,
               min(p1.hairclr) AS min_hairclr,
               max(p1.hairclr) AS max_hairclr,
               min(p1.plysprt) AS min_plysprt,
               max(p1.plysprt) AS max_plysprt,
               min(p1.wtchsprt) AS min_wtchsprt,
               max(p1.wtchsprt) AS max_wtchsprt,
               min(p1.bdybuild) AS min_bdybuild,
               max(p1.bdybuild) AS max_bdybuild,
               min(p1.dining) AS min_dining,
               max(p1.dining) AS max_dining,
               min(p1.museum) AS min_museum,
               max(p1.museum) AS max_museum,
               min(p1.art) AS min_art,
               max(p1.art) AS max_art,
               min(p1.hiking) AS min_hiking,
               max(p1.hiking) AS max_hiking,
               min(p1.videogam) AS min_videogam,
               max(p1.videogam) AS max_videogam,
               min(p1.dancing) AS min_dancing,
               max(p1.dancing) AS max_dancing,
               min(p1.reading) AS min_reading,
               max(p1.reading) AS max_reading,
               min(p1.tv) AS min_tv,
               max(p1.tv) AS max_tv,
               min(p1.theatre) AS min_theatre,
               max(p1.theatre) AS max_theatre,
               min(p1.movies) AS min_movies,
               max(p1.movies) AS max_movies,
               min(p1.concerts) AS min_concerts,
               max(p1.concerts) AS max_concerts,
               min(p1.music) AS min_music,
               max(p1.music) AS max_music,
               min(p1.shopping) AS min_shopping,
               max(p1.shopping) AS max_shopping,
               min(p1.yoga) AS min_yoga,
               max(p1.yoga) AS max_yoga,
               min(p1.samerace) AS min_samerace,
               max(p1.samerace) AS max_samerace,
               min(p1.ss1atrct) AS min_ss1atrct,
               max(p1.ss1atrct) AS max_ss1atrct,
               min(p1.ss1sincr) AS min_ss1sincr,
               max(p1.ss1sincr) AS max_ss1sincr,
               min(p1.ss1intel) AS min_ss1intel,
               max(p1.ss1intel) AS max_ss1intel,
               min(p1.ss1funny) AS min_ss1funny,
               max(p1.ss1funny) AS max_ss1funny,
               min(p1.ss1ambit) AS min_ss1ambit,
               max(p1.ss1ambit) AS max_ss1ambit,
               min(p1.ss1wlthy) AS min_ss1wlthy,
               max(p1.ss1wlthy) AS max_ss1wlthy,
               min(p1.ss1court) AS min_ss1court,
               max(p1.ss1court) AS max_ss1court,
               min(p1.os1atrct) AS min_os1atrct,
               max(p1.os1atrct) AS max_os1atrct,
               min(p1.os1sincr) AS min_os1sincr,
               max(p1.os1sincr) AS max_os1sincr,
               min(p1.os1intel) AS min_os1intel,
               max(p1.os1intel) AS max_os1intel,
               min(p1.os1funny) AS min_os1funny,
               max(p1.os1funny) AS max_os1funny,
               min(p1.os1ambit) AS min_os1ambit,
               max(p1.os1ambit) AS max_os1ambit,
               min(p1.os1wlthy) AS min_os1wlthy,
               max(p1.os1wlthy) AS max_os1wlthy,
               min(p1.os1court) AS min_os1court,
               max(p1.os1court) AS max_os1court,
               min(p1.sd1atrct) AS min_sd1atrct,
               max(p1.sd1atrct) AS max_sd1atrct,
               min(p1.sd1sincr) AS min_sd1sincr,
               max(p1.sd1sincr) AS max_sd1sincr,
               min(p1.sd1intel) AS min_sd1intel,
               max(p1.sd1intel) AS max_sd1intel,
               min(p1.sd1funny) AS min_sd1funny,
               max(p1.sd1funny) AS max_sd1funny,
               min(p1.sd1ambit) AS min_sd1ambit,
               max(p1.sd1ambit) AS max_sd1ambit,
               min(p1.sd1shrd) AS min_sd1shrd,
               max(p1.sd1shrd) AS max_sd1shrd,
               min(p1.sd1wlthy) AS min_sd1wlthy,
               max(p1.sd1wlthy) AS max_sd1wlthy,
               min(p1.sd1court) AS min_sd1court,
               max(p1.sd1court) AS max_sd1court,
               min(p1.od1atrct) AS min_od1atrct,
               max(p1.od1atrct) AS max_od1atrct,
               min(p1.od1sincr) AS min_od1sincr,
               max(p1.od1sincr) AS max_od1sincr,
               min(p1.od1intel) AS min_od1intel,
               max(p1.od1intel) AS max_od1intel,
               min(p1.od1funny) AS min_od1funny,
               max(p1.od1funny) AS max_od1funny,
               min(p1.od1ambit) AS min_od1ambit,
               max(p1.od1ambit) AS max_od1ambit,
               min(p1.od1shrd) AS min_od1shrd,
               max(p1.od1shrd) AS max_od1shrd,
               min(p1.od1wlthy) AS min_od1wlthy,
               max(p1.od1wlthy) AS max_od1wlthy,
               min(p1.od1court) AS min_od1court,
               max(p1.od1court) AS max_od1court,
               min(p1.fd1atrct) AS min_fd1atrct,
               max(p1.fd1atrct) AS max_fd1atrct,
               min(p1.fd1sincr) AS min_fd1sincr,
               max(p1.fd1sincr) AS max_fd1sincr,
               min(p1.fd1intel) AS min_fd1intel,
               max(p1.fd1intel) AS max_fd1intel,
               min(p1.fd1funny) AS min_fd1funny,
               max(p1.fd1funny) AS max_fd1funny,
               min(p1.fd1ambit) AS min_fd1ambit,
               max(p1.fd1ambit) AS max_fd1ambit,
               min(p1.fd1shrd) AS min_fd1shrd,
               max(p1.fd1shrd) AS max_fd1shrd,
               min(p1.fd1wlthy) AS min_fd1wlthy,
               max(p1.fd1wlthy) AS max_fd1wlthy,
               min(p1.fd1court) AS min_fd1court,
               max(p1.fd1court) AS max_fd1court,
               min(p1.Subject) AS min_Subject,
               max(p1.Subject) AS max_Subject,
               min(p1.UnderStat) AS min_UnderStat,
               max(p1.UnderStat) AS max_UnderStat,
               min(p1.ForeignBorn) AS min_ForeignBorn,
               max(p1.ForeignBorn) AS max_ForeignBorn
          FROM person_meta_features p1
      """
      style: "sql_extractor"
      dependencies: ["compute_prosodic_statistics"]
    }

    # Creates a table of 1 row.
    compute_textual_statistics {
      sql: """
        DROP TABLE IF EXISTS textual_statistics;

        CREATE TABLE textual_statistics AS
          SELECT
              max(tot_words) AS max_tot_words,
              min(tot_words) AS min_tot_words,
              max(love) AS max_love,
              min(love) AS min_love,
              max(i_mean_discourse) AS max_i_mean_discourse,
              min(i_mean_discourse) AS min_i_mean_discourse,
              max(sex) AS max_sex,
              min(sex) AS min_sex,
              max(meta) AS max_meta,
              min(meta) AS min_meta,
              max(negate) AS max_negate,
              min(negate) AS min_negate,
              max(um_discourse) AS max_um_discourse,
              min(um_discourse) AS min_um_discourse,
              max(negemo) AS max_negemo,
              min(negemo) AS min_negemo,
              max(appreciation) AS max_appreciation,
              min(appreciation) AS min_appreciation,
              max(tot_question_words) AS max_tot_question_words,
              min(tot_question_words) AS min_tot_question_words,
              max(you_know_discourse) AS max_you_know_discourse,
              min(you_know_discourse) AS min_you_know_discourse,
              max(hate) AS max_hate,
              min(hate) AS min_hate,
              max(food) AS max_food,
              min(food) AS min_food,
              max(uh_discourse) AS max_uh_discourse,
              min(uh_discourse) AS min_uh_discourse,
              max(you) AS max_you,
              min(you) AS min_you,
              max(I) AS max_I,
              min(I) AS min_I,
              max(drink) AS max_drink,
              min(drink) AS min_drink,
              max(like_discourse) AS max_like_discourse,
              min(like_discourse) AS min_like_discourse,
              max(hedge) AS max_hedge,
              min(hedge) AS min_hedge,
              max(academics) AS max_academics,
              min(academics) AS min_academics,
              max(laughter) AS max_laughter,
              min(laughter) AS min_laughter,
              max(agree) AS max_agree,
              min(agree) AS min_agree
          FROM textual_features f
      """
      style: "sql_extractor"
      dependencies: ["compute_meta_statistics"]
    }

    # Extract the features from each date (prosodic and metadata).
    extract_features {
      input: """
        SELECT pros1.dateid AS dateid,
               pros1.talked_first AS self_talked_first,
               pros2.talked_first AS other_talked_first,
               pros1.turn_duration AS self_turn_duration,
               pros2.turn_duration AS other_turn_duration,
               min_turn_duration,
               max_turn_duration,
               pros1.turn_duration_sd AS self_turn_duration_sd,
               pros2.turn_duration_sd AS other_turn_duration_sd,
               min_turn_duration_sd,
               max_turn_duration_sd,
               pros1.f0_min AS self_f0_min,
               pros2.f0_min AS other_f0_min,
               min_f0_min,
               max_f0_min,
               pros1.f0_min_sd AS self_f0_min_sd,
               pros2.f0_min_sd AS other_f0_min_sd,
               min_f0_min_sd,
               max_f0_min_sd,
               pros1.f0_max AS self_f0_max,
               pros2.f0_max AS other_f0_max,
               min_f0_max,
               max_f0_max,
               pros1.f0_max_sd AS self_f0_max_sd,
               pros2.f0_max_sd AS other_f0_max_sd,
               min_f0_max_sd,
               max_f0_max_sd,
               pros1.f0_mean AS self_f0_mean,
               pros2.f0_mean AS other_f0_mean,
               min_f0_mean,
               max_f0_mean,
               pros1.f0_mean_sd AS self_f0_mean_sd,
               pros2.f0_mean_sd AS other_f0_mean_sd,
               min_f0_mean_sd,
               max_f0_mean_sd,
               pros1.f0_sd AS self_f0_sd,
               pros2.f0_sd AS other_f0_sd,
               min_f0_sd,
               max_f0_sd,
               pros1.f0_sd_sd AS self_f0_sd_sd,
               pros2.f0_sd_sd AS other_f0_sd_sd,
               min_f0_sd_sd,
               max_f0_sd_sd,
               pros1.pitch_range AS self_pitch_range,
               pros2.pitch_range AS other_pitch_range,
               min_pitch_range,
               max_pitch_range,
               pros1.pitch_range_sd AS self_pitch_range_sd,
               pros2.pitch_range_sd AS other_pitch_range_sd,
               min_pitch_range_sd,
               max_pitch_range_sd,
               pros1.rms_min AS self_rms_min,
               pros2.rms_min AS other_rms_min,
               min_rms_min,
               max_rms_min,
               pros1.rms_min_sd AS self_rms_min,
               pros2.rms_min_sd AS other_rms_min,
               min_rms_min_sd,
               max_rms_min_sd,
               pros1.rms_max AS self_rms_max,
               pros2.rms_max AS other_rms_max,
               min_rms_max,
               max_rms_max,
               pros1.rms_max_sd AS self_rms_max_sd,
               pros2.rms_max_sd AS other_rms_max_sd,
               min_rms_max_sd,
               max_rms_max_sd,
               pros1.rms_mean AS self_rms_mean,
               pros2.rms_mean AS other_rms_mean,
               min_rms_mean,
               max_rms_mean,
               pros1.rms_mean_sd AS self_rms_mean_sd,
               pros2.rms_mean_sd AS other_rms_mean_sd,
               min_rms_mean_sd,
               max_rms_mean_sd,

               p1.female AS self_female,
               p2.female AS other_female,
               min_female,
               max_female,
               p1.race AS self_race,
               p2.race AS other_race,
               min_race,
               max_race,
               p1.evntgoal AS self_evntgoal,
               p2.evntgoal AS other_evntgoal,
               min_evntgoal,
               max_evntgoal,

               p1.frqdates AS self_frqdates,
               p2.frqdates AS other_frqdates,
               max_frqdates,
               min_frqdates,

               p1.frqsocl AS self_frqsocl,
               p2.frqsocl AS other_frqsocl,
               min_frqsocl,
               max_frqsocl,

               p1.sdbefore AS self_sdbefore,
               p2.sdbefore AS other_sdbefore,
               min_sdbefore,
               max_sdbefore,

               p1.height AS self_height,
               p2.height AS other_height,
               min_height,
               max_height,

               p1.weight AS self_weight,
               p2.weight AS other_weight,
               min_weight,
               max_weight,

               p1.hairclr AS self_hairclr,
               p2.hairclr AS other_hairclr,
               min_hairclr,
               max_hairclr,

               p1.plysprt AS self_plysprt,
               p2.plysprt AS other_plysprt,
               min_plysprt,
               max_plysprt,

               p1.wtchsprt AS self_wtchsprt,
               p2.wtchsprt AS other_wtchsprt,
               min_wtchsprt,
               max_wtchsprt,

               p1.bdybuild AS self_bdybuild,
               p2.bdybuild AS other_bdybuild,
               min_bdybuild,
               max_bdybuild,

               p1.dining AS self_dining,
               p2.dining AS other_dining,
               min_dining,
               max_dining,

               p1.museum AS self_museum,
               p2.museum AS other_museum,
               min_museum,
               max_museum,

               p1.art AS self_art,
               p2.art AS other_art,
               min_art,
               max_art,

               p1.hiking AS self_hiking,
               p2.hiking AS other_hiking,
               min_hiking,
               max_hiking,

               p1.videogam AS self_videogam,
               p2.videogam AS other_videogam,
               min_videogam,
               max_videogam,

               p1.dancing AS self_dancing,
               p2.dancing AS other_dancing,
               min_dancing,
               max_dancing,

               p1.reading AS self_reading,
               p2.reading AS other_reading,
               min_reading,
               max_reading,

               p1.tv AS self_tv,
               p2.tv AS other_tv,
               min_tv,
               max_tv,

               p1.theatre AS self_theatre,
               p2.theatre AS other_theatre,
               min_theatre,
               max_theatre,

               p1.movies AS self_movies,
               p2.movies AS other_movies,
               min_movies,
               max_movies,

               p1.concerts AS self_concerts,
               p2.concerts AS other_concerts,
               min_concerts,
               max_concerts,

               p1.music AS self_music,
               p2.music AS other_music,
               min_music,
               max_music,

               p1.shopping AS self_shopping,
               p2.shopping AS other_shopping,
               min_shopping,
               max_shopping,

               p1.yoga AS self_yoga,
               p2.yoga AS other_yoga,
               min_yoga,
               max_yoga,

               p1.samerace AS self_samerace,
               p2.samerace AS other_samerace,
               min_samerace,
               max_samerace,

               p1.ss1atrct AS self_ss1atrct,
               p2.ss1atrct AS other_ss1atrct,
               min_ss1atrct,
               max_ss1atrct,

               p1.ss1sincr AS self_ss1sincr,
               p2.ss1sincr AS other_ss1sincr,
               min_ss1sincr,
               max_ss1sincr,

               p1.ss1intel AS self_ss1intel,
               p2.ss1intel AS other_ss1intel,
               min_ss1intel,
               max_ss1intel,

               p1.ss1funny AS self_ss1funny,
               p2.ss1funny AS other_ss1funny,
               min_ss1funny,
               max_ss1funny,

               p1.ss1ambit AS self_ss1ambit,
               p2.ss1ambit AS other_ss1ambit,
               min_ss1ambit,
               max_ss1ambit,

               p1.ss1wlthy AS self_ss1wlthy,
               p2.ss1wlthy AS other_ss1wlthy,
               min_ss1wlthy,
               max_ss1wlthy,

               p1.ss1court AS self_ss1court,
               p2.ss1court AS other_ss1court,
               min_ss1court,
               max_ss1court,

               p1.os1atrct AS self_os1atrct,
               p2.os1atrct AS other_os1atrct,
               min_os1atrct,
               max_os1atrct,

               p1.os1sincr AS self_os1sincr,
               p2.os1sincr AS other_os1sincr,
               min_os1sincr,
               max_os1sincr,

               p1.os1intel AS self_os1intel,
               p2.os1intel AS other_os1intel,
               min_os1intel,
               max_os1intel,

               p1.os1funny AS self_os1funny,
               p2.os1funny AS other_os1funny,
               min_os1funny,
               max_os1funny,

               p1.os1ambit AS self_os1ambit,
               p2.os1ambit AS other_os1ambit,
               min_os1ambit,
               max_os1ambit,

               p1.os1wlthy AS self_os1wlthy,
               p2.os1wlthy AS other_os1wlthy,
               min_os1wlthy,
               max_os1wlthy,

               p1.os1court AS self_os1court,
               p2.os1court AS other_os1court,
               min_os1court,
               max_os1court,

               p1.sd1atrct AS self_sd1atrct,
               p2.sd1atrct AS other_sd1atrct,
               min_sd1atrct,
               max_sd1atrct,

               p2.sd1sincr AS other_sd1sincr,
               p2.sd1sincr AS other_sd1sincr,
               min_sd1sincr,
               max_sd1sincr,

               p1.sd1intel AS self_sd1intel,
               p2.sd1intel AS other_sd1intel,
               min_sd1intel,
               max_sd1intel,

               
               p1.sd1funny AS self_sd1funny,
               p2.sd1funny AS other_sd1funny,
               min_sd1funny,
               max_sd1funny,
               
               p1.sd1ambit AS self_sd1ambit,
               p2.sd1ambit AS other_sd1ambit,
               min_sd1ambit,
               max_sd1ambit,
               
               p1.sd1shrd AS self_sd1shrd,
               p2.sd1shrd AS other_sd1shrd,
               min_sd1shrd,
               max_sd1shrd,
               
               p1.sd1wlthy AS self_sd1wlthy,
               p2.sd1wlthy AS other_sd1wlthy,
               min_sd1wlthy,
               max_sd1wlthy,
               
               p1.sd1court AS self_sd1court,
               p2.sd1court AS other_sd1court,
               min_sd1court,
               max_sd1court,
               
               p1.od1atrct AS self_od1atrct,
               p2.od1atrct AS other_od1atrct,
               min_od1atrct,
               max_od1atrct,
               
               p1.od1sincr AS self_od1sincr,
               p2.od1sincr AS other_od1sincr,
               min_od1sincr,
               max_od1sincr,
               
               p1.od1intel AS self_od1intel,
               p2.od1intel AS other_od1intel,
               min_od1intel,
               max_od1intel,
               
               p1.od1funny AS self_od1funny,
               p2.od1funny AS other_od1funny,
               min_od1funny,
               max_od1funny,
               
               p1.od1ambit AS self_od1ambit,
               p2.od1ambit AS other_od1ambit,
               min_od1ambit,
               max_od1ambit,
               
               p1.od1shrd AS self_od1shrd,
               p2.od1shrd AS other_od1shrd,
               min_od1shrd,
               max_od1shrd,
               
               p1.od1wlthy AS self_od1wlthy,
               p2.od1wlthy AS other_od1wlthy,
               min_od1wlthy,
               max_od1wlthy,
               
               p1.od1court AS self_od1court,
               p2.od1court AS other_od1court,
               min_od1court,
               max_od1court,
               
               p1.fd1atrct AS self_fd1atrct,
               p2.fd1atrct AS other_fd1atrct,
               min_fd1atrct,
               max_fd1atrct,
               
               p1.fd1sincr AS self_fd1sincr,
               p2.fd1sincr AS other_fd1sincr,
               min_fd1sincr,
               max_fd1sincr,

               p1.fd1intel AS self_fd1intel,
               p2.fd1intel AS other_fd1intel,
               min_fd1intel,
               max_fd1intel,
               
               p1.fd1funny AS self_fd1funny,
               p2.fd1funny AS other_fd1funny,
               min_fd1funny,
               max_fd1funny,

               p1.fd1ambit AS self_fd1ambit,
               p2.fd1ambit AS other_fd1ambit,
               min_fd1ambit,
               max_fd1ambit,
               
               p1.fd1shrd AS self_fd1shrd,
               p2.fd1shrd AS other_fd1shrd,
               min_fd1shrd,
               max_fd1shrd,
               
               p1.fd1wlthy AS self_fd1wlthy,
               p2.fd1wlthy AS other_fd1wlthy,
               min_fd1wlthy,
               max_fd1wlthy,
               
               p1.fd1court AS self_fd1court,
               p2.fd1court AS other_fd1court,
               min_fd1court,
               max_fd1court,
               
               p1.Subject AS self_Subject,
               p2.Subject AS other_Subject,
               min_Subject,
               max_Subject,
               
               p1.UnderStat AS self_UnderStat,
               p2.UnderStat AS other_UnderStat,
               min_UnderStat,
               max_UnderStat,
               
               p1.ForeignBorn AS self_ForeignBorn,
               p2.ForeignBorn AS other_ForeignBorn,
               min_ForeignBorn,
               max_ForeignBorn,


               t1.tot_words AS self_tot_words,
               t2.tot_words AS other_tot_words,
               max_tot_words,
               min_tot_words,

               t1.love AS self_love,
               t2.love AS other_love,
               max_love,
               min_love,

               max_i_mean_discourse,
               min_i_mean_discourse,
               t1.i_mean_discourse AS self_i_mean_discourse,
               t2.i_mean_discourse AS other_i_mean_discourse,

               max_sex,
               min_sex,
               t1.sex AS self_sex,
               t2.sex AS other_sex,

               max_meta,
               min_meta,
               t1.meta AS self_meta,
               t2.meta AS other_meta,

               max_negate,
               min_negate,
               t1.negate AS self_negate,
               t2.negate AS other_negate,

               max_um_discourse,
               min_um_discourse,
               t1.um_discourse AS self_um_discourse,
               t2.um_discourse AS other_um_discourse,

               max_negemo,
               min_negemo,
               t1.negemo AS self_negemo,
               t2.negemo AS other_negemo,

               max_appreciation,
               min_appreciation,
               t1.appreciation AS self_appreciation,
               t2.appreciation AS other_appreciation,

               max_tot_question_words,
               min_tot_question_words,
               t1.tot_question_words AS self_tot_question_words,
               t2.tot_question_words AS other_tot_question_words,

               max_you_know_discourse,
               min_you_know_discourse,
               t1.you_know_discourse AS self_you_know_discourse,
               t2.you_know_discourse AS other_you_know_discourse,

               max_hate,
               min_hate,
               t1.hate AS self_hate,
               t2.hate AS other_hate,

               max_food,
               min_food,
               t1.food AS self_food,
               t2.food AS other_food,

               max_uh_discourse,
               min_uh_discourse,
               t1.uh_discourse AS self_uh_discourse,
               t2.uh_discourse AS other_uh_discourse,

               max_you,
               min_you,
               t1.you AS self_you,
               t2.you AS other_you,

               max_I,
               min_I,
               t1.I AS self_I,
               t2.I AS other_I,

               max_drink,
               min_drink,
               t1.drink AS self_drink,
               t2.drink AS other_drink,

               max_like_discourse,
               min_like_discourse,
               t1.like_discourse AS self_like_discourse,
               t2.like_discourse AS other_like_discourse,

               max_hedge,
               min_hedge,
               t1.hedge AS self_hedge,
               t2.hedge AS other_hedge,

               max_academics,
               min_academics,
               t1.academics AS self_academics,
               t2.academics AS other_academics,

               max_laughter,
               min_laughter,
               t1.laughter AS self_laughter,
               t2.laughter AS other_laughter,

               max_agree,
               min_agree,
               t1.agree AS self_agree,
               t2.agree AS other_agree

        FROM prosodic_features pros1,
             prosodic_features pros2,
             prosodic_statistics stats,
             meta_statistics meta_stats,
             person_meta_features p1,
             person_meta_features p2,
             textual_statistics text_stats,
             textual_features t1,
             textual_features t2
        WHERE pros1.self_id = p1.person_id AND
              pros1.other_id = p2.person_id AND
              t1.self_id = p1.person_id AND
              t1.other_id = p2.person_id AND
              pros2.self_id = pros1.other_id AND
              pros2.other_id = pros1.self_id AND
              t1.self_id = t2.other_id AND
              t1.other_id = t2.self_id;
      """
      output_relation: "date_feature"
      udf: ${APP_HOME}"/udf/extract_all_features.py ${meta} ${prosodic} ${textual}"
      style: "tsv_extractor"
      dependencies: ["compute_textual_statistics"]
    }


    add_positive_examples {
      sql: """
        INSERT INTO output(dateid, is_enjoyable)
          SELECT dateid,
                 True
          FROM output_labels
          WHERE type = 'TRAIN' AND
                label = '1'
      """
      style: "sql_extractor"
      dependencies: ["extract_features"]
    }

    add_negative_examples {
      sql: """
        INSERT INTO output(dateid, is_enjoyable)
          SELECT dateid,
                 False
          FROM output_labels
          WHERE type = 'TRAIN' AND
                label = '-1'
      """
      style: "sql_extractor"
      dependencies: ["add_positive_examples"]
    }

    add_non_examples {
      sql: """
        INSERT INTO output(dateid, is_enjoyable)
          SELECT dateid,
                 NULL
          FROM output_labels
          WHERE type = 'TEST'
      """
      style: "sql_extractor"
      dependencies: ["add_negative_examples"]
    }

  }

  ###
  ### INFERENCE RULES
  ###

  inference.factors {

    # Learn the output label based on the features for this date
    date_enjoyable {
      input_query: """
          SELECT output.id AS "output.id",
                 output.is_enjoyable AS "output.is_enjoyable",
                 date_feature.feature AS feature
          FROM date_feature,
               output
          WHERE date_feature.dateid = output.dateid
        """
      function: "IsTrue(output.is_enjoyable)"
      weight: "?(feature)"
    }

  }

  # Specify a holdout fraction
  calibration.holdout_fraction: 0.00

}
